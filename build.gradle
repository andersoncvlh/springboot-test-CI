plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
  	id 'org.sonarqube' version '2.8'
    id "com.palantir.docker" version "0.26.0"
    id "com.palantir.docker-run" version "0.26.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11.0.2'

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Example of SonarQube Scanner for Gradle Usage'
		property 'sonar.projectKey', 'springboot-test-ci'
		property 'sonar.host.url', 'http://sonarqube:9000'
		property 'sonar.login', '9647d74684b5ac3580ceec55c74c7b32972dd130'
		property 'sonar.projectKey', 'springboot-test-ci'
        property 'sonar.jacoco.reportPaths', '${jacoco.destinationFile}'
        property 'sonar.groovy.jacoco.reportPath', '${jacoco.destinationFile}'
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/*.xml"
        property "sonar.java.coveragePlugin", "jacoco"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.ow2.asm:asm:9.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.6"
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}

//project.tasks["sonarqube"].dependsOn "anotherTask"

String imageName = "andersoncmciet/${project.name}:$version"
docker {
    dockerfile project.file('Dockerfile')
    name imageName
    files bootJar.archiveFile.get()
    buildArgs(['JAR_FILE': "${bootJar.archiveFileName.get()}"])
}

dockerRun {
    name "${project.name}-container"
    image imageName
    ports '8081:8081'
    env 'SPRING_PROFILES_ACTIVE': 'dev'
    daemonize true
    clean false
}